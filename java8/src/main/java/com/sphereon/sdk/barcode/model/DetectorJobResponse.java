/**
 * Barcode 
 * <b>The Barcode Detection API 'barcode/detector' converts barcodes from image files to JSON files.</b>    The flow is generally as follows:  1. First upload an image using the /barcode/detector POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Start the job from a PUT request to the /barcode/detector/{jobid} endpoint, with the Job and Settings JSON as request body. The barcode detection will now start.  3. Check the job status from the /barcode/detector/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the JSON file using the /barcode/detector/{jobid}/stream GET endpoint. This will return the JSON file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.barcode.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.sphereon.sdk.barcode.model.Barcode;
import com.sphereon.sdk.barcode.model.DetectorJob;
import com.sphereon.sdk.barcode.model.DetectorTask;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;


/**
 * The Detector job. Has access to the job settings as well as engine tasks
 */
@ApiModel(description = "The Detector job. Has access to the job settings as well as engine tasks")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-11T10:22:39.915+02:00")
public class DetectorJobResponse   {
  @SerializedName("barcodeResults")
  private List<Barcode> barcodeResults = new ArrayList<Barcode>();

  @SerializedName("completionTime")
  private OffsetDateTime completionTime = null;

  @SerializedName("jobId")
  private String jobId = null;

  @SerializedName("creationTime")
  private OffsetDateTime creationTime = null;

  @SerializedName("inputs")
  private List<String> inputs = new ArrayList<String>();

  @SerializedName("updateTime")
  private OffsetDateTime updateTime = null;

  @SerializedName("readerTasks")
  private List<DetectorTask> readerTasks = new ArrayList<DetectorTask>();

  @SerializedName("job")
  private DetectorJob job = null;

  @SerializedName("statusMessage")
  private String statusMessage = null;

  @SerializedName("queueTime")
  private OffsetDateTime queueTime = null;

  /**
   * The status of the job
   */
  public enum StatusEnum {
    @SerializedName("INPUTS_UPLOADED")
    INPUTS_UPLOADED("INPUTS_UPLOADED"),
    
    @SerializedName("PROCESSING")
    PROCESSING("PROCESSING"),
    
    @SerializedName("DONE")
    DONE("DONE"),
    
    @SerializedName("ERROR")
    ERROR("ERROR"),
    
    @SerializedName("DELETED")
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public DetectorJobResponse barcodeResults(List<Barcode> barcodeResults) {
    this.barcodeResults = barcodeResults;
    return this;
  }

  public DetectorJobResponse addBarcodeResultsItem(Barcode barcodeResultsItem) {
    this.barcodeResults.add(barcodeResultsItem);
    return this;
  }

   /**
   * The returned barcodes
   * @return barcodeResults
  **/
  @ApiModelProperty(example = "null", value = "The returned barcodes")
  public List<Barcode> getBarcodeResults() {
    return barcodeResults;
  }

  public void setBarcodeResults(List<Barcode> barcodeResults) {
    this.barcodeResults = barcodeResults;
  }

   /**
   * The completion date/time of this job in ISO 8601 format
   * @return completionTime
  **/
  @ApiModelProperty(example = "null", value = "The completion date/time of this job in ISO 8601 format")
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

  public DetectorJobResponse jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }

   /**
   * The creation date/time of this job in ISO 8601 format
   * @return creationTime
  **/
  @ApiModelProperty(example = "null", value = "The creation date/time of this job in ISO 8601 format")
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public DetectorJobResponse inputs(List<String> inputs) {
    this.inputs = inputs;
    return this;
  }

  public DetectorJobResponse addInputsItem(String inputsItem) {
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * The original input files. Currently supported inputs are: tif files
   * @return inputs
  **/
  @ApiModelProperty(example = "null", required = true, value = "The original input files. Currently supported inputs are: tif files")
  public List<String> getInputs() {
    return inputs;
  }

  public void setInputs(List<String> inputs) {
    this.inputs = inputs;
  }

   /**
   * The last update date/time of this job in ISO 8601 format
   * @return updateTime
  **/
  @ApiModelProperty(example = "null", value = "The last update date/time of this job in ISO 8601 format")
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public DetectorJobResponse readerTasks(List<DetectorTask> readerTasks) {
    this.readerTasks = readerTasks;
    return this;
  }

  public DetectorJobResponse addReaderTasksItem(DetectorTask readerTasksItem) {
    this.readerTasks.add(readerTasksItem);
    return this;
  }

   /**
   * Get readerTasks
   * @return readerTasks
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<DetectorTask> getReaderTasks() {
    return readerTasks;
  }

  public void setReaderTasks(List<DetectorTask> readerTasks) {
    this.readerTasks = readerTasks;
  }

  public DetectorJobResponse job(DetectorJob job) {
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @ApiModelProperty(example = "null", value = "")
  public DetectorJob getJob() {
    return job;
  }

  public void setJob(DetectorJob job) {
    this.job = job;
  }

   /**
   * A status message, which can be informational, warning or error. A message here does not indicate an error perse
   * @return statusMessage
  **/
  @ApiModelProperty(example = "null", value = "A status message, which can be informational, warning or error. A message here does not indicate an error perse")
  public String getStatusMessage() {
    return statusMessage;
  }

   /**
   * The reader queue date/time of this job in ISO 8601 format
   * @return queueTime
  **/
  @ApiModelProperty(example = "null", value = "The reader queue date/time of this job in ISO 8601 format")
  public OffsetDateTime getQueueTime() {
    return queueTime;
  }

   /**
   * The status of the job
   * @return status
  **/
  @ApiModelProperty(example = "null", required = true, value = "The status of the job")
  public StatusEnum getStatus() {
    return status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetectorJobResponse detectorJobResponse = (DetectorJobResponse) o;
    return Objects.equals(this.barcodeResults, detectorJobResponse.barcodeResults) &&
        Objects.equals(this.completionTime, detectorJobResponse.completionTime) &&
        Objects.equals(this.jobId, detectorJobResponse.jobId) &&
        Objects.equals(this.creationTime, detectorJobResponse.creationTime) &&
        Objects.equals(this.inputs, detectorJobResponse.inputs) &&
        Objects.equals(this.updateTime, detectorJobResponse.updateTime) &&
        Objects.equals(this.readerTasks, detectorJobResponse.readerTasks) &&
        Objects.equals(this.job, detectorJobResponse.job) &&
        Objects.equals(this.statusMessage, detectorJobResponse.statusMessage) &&
        Objects.equals(this.queueTime, detectorJobResponse.queueTime) &&
        Objects.equals(this.status, detectorJobResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(barcodeResults, completionTime, jobId, creationTime, inputs, updateTime, readerTasks, job, statusMessage, queueTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetectorJobResponse {\n");
    
    sb.append("    barcodeResults: ").append(toIndentedString(barcodeResults)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    readerTasks: ").append(toIndentedString(readerTasks)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    queueTime: ").append(toIndentedString(queueTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

