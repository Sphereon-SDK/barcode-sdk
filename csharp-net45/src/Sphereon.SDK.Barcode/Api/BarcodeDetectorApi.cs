/* 
 * Barcode 
 *
 * <b>The Barcode Detection API 'barcode/detector' converts barcodes from image files to JSON files.</b>    The flow is generally as follows:  1. First upload an image using the /barcode/detector POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Start the job from a PUT request to the /barcode/detector/{jobid} endpoint, with the Job and Settings JSON as request body. The barcode detection will now start.  3. Check the job status from the /barcode/detector/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the JSON file using the /barcode/detector/{jobid}/stream GET endpoint. This will return the JSON file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Barcode.Client;
using Sphereon.SDK.Barcode.Model;

namespace Sphereon.SDK.Barcode.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBarcodeDetectorApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the Detector Job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>DetectorJobResponse</returns>
        DetectorJobResponse DeleteJob (string jobid);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the Detector Job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of DetectorJobResponse</returns>
        ApiResponse<DetectorJobResponse> DeleteJobWithHttpInfo (string jobid);
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the Detector job definition and current state. Please note that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>DetectorJobResponse</returns>
        DetectorJobResponse GetJob (string jobid);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the Detector job definition and current state. Please note that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of DetectorJobResponse</returns>
        ApiResponse<DetectorJobResponse> GetJobWithHttpInfo (string jobid);
        /// <summary>
        /// Submit Detector job for processing
        /// </summary>
        /// <remarks>
        /// Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>DetectorJobResponse</returns>
        DetectorJobResponse SubmitJob (string jobid, DetectorJob job);

        /// <summary>
        /// Submit Detector job for processing
        /// </summary>
        /// <remarks>
        /// Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>ApiResponse of DetectorJobResponse</returns>
        ApiResponse<DetectorJobResponse> SubmitJobWithHttpInfo (string jobid, DetectorJob job);
        /// <summary>
        /// Upload the file
        /// </summary>
        /// <remarks>
        /// Upload the  image.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image.</param>
        /// <returns>DetectorJobResponse</returns>
        DetectorJobResponse UploadFile (System.IO.Stream stream);

        /// <summary>
        /// Upload the file
        /// </summary>
        /// <remarks>
        /// Upload the  image.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image.</param>
        /// <returns>ApiResponse of DetectorJobResponse</returns>
        ApiResponse<DetectorJobResponse> UploadFileWithHttpInfo (System.IO.Stream stream);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the Detector Job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of DetectorJobResponse</returns>
        System.Threading.Tasks.Task<DetectorJobResponse> DeleteJobAsync (string jobid);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the Detector Job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (DetectorJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectorJobResponse>> DeleteJobAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the Detector job definition and current state. Please note that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of DetectorJobResponse</returns>
        System.Threading.Tasks.Task<DetectorJobResponse> GetJobAsync (string jobid);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the Detector job definition and current state. Please note that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (DetectorJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectorJobResponse>> GetJobAsyncWithHttpInfo (string jobid);
        /// <summary>
        /// Submit Detector job for processing
        /// </summary>
        /// <remarks>
        /// Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>Task of DetectorJobResponse</returns>
        System.Threading.Tasks.Task<DetectorJobResponse> SubmitJobAsync (string jobid, DetectorJob job);

        /// <summary>
        /// Submit Detector job for processing
        /// </summary>
        /// <remarks>
        /// Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>Task of ApiResponse (DetectorJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectorJobResponse>> SubmitJobAsyncWithHttpInfo (string jobid, DetectorJob job);
        /// <summary>
        /// Upload the file
        /// </summary>
        /// <remarks>
        /// Upload the  image.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image.</param>
        /// <returns>Task of DetectorJobResponse</returns>
        System.Threading.Tasks.Task<DetectorJobResponse> UploadFileAsync (System.IO.Stream stream);

        /// <summary>
        /// Upload the file
        /// </summary>
        /// <remarks>
        /// Upload the  image.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image.</param>
        /// <returns>Task of ApiResponse (DetectorJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectorJobResponse>> UploadFileAsyncWithHttpInfo (System.IO.Stream stream);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BarcodeDetectorApi : IBarcodeDetectorApi
    {
        private Sphereon.SDK.Barcode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeDetectorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BarcodeDetectorApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Barcode.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeDetectorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BarcodeDetectorApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Barcode.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Barcode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a job manually Delete the Detector Job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>DetectorJobResponse</returns>
        public DetectorJobResponse DeleteJob (string jobid)
        {
             ApiResponse<DetectorJobResponse> localVarResponse = DeleteJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a job manually Delete the Detector Job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of DetectorJobResponse</returns>
        public ApiResponse< DetectorJobResponse > DeleteJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling BarcodeDetectorApi->DeleteJob");

            var localVarPath = "/barcode/1.0.0/barcode/detector/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectorJobResponse)));
            
        }

        /// <summary>
        /// Delete a job manually Delete the Detector Job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of DetectorJobResponse</returns>
        public async System.Threading.Tasks.Task<DetectorJobResponse> DeleteJobAsync (string jobid)
        {
             ApiResponse<DetectorJobResponse> localVarResponse = await DeleteJobAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a job manually Delete the Detector Job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (DetectorJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetectorJobResponse>> DeleteJobAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling BarcodeDetectorApi->DeleteJob");

            var localVarPath = "/barcode/1.0.0/barcode/detector/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectorJobResponse)));
            
        }

        /// <summary>
        /// Job definition and state Get the Detector job definition and current state. Please note that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>DetectorJobResponse</returns>
        public DetectorJobResponse GetJob (string jobid)
        {
             ApiResponse<DetectorJobResponse> localVarResponse = GetJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Job definition and state Get the Detector job definition and current state. Please note that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of DetectorJobResponse</returns>
        public ApiResponse< DetectorJobResponse > GetJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling BarcodeDetectorApi->GetJob");

            var localVarPath = "/barcode/1.0.0/barcode/detector/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectorJobResponse)));
            
        }

        /// <summary>
        /// Job definition and state Get the Detector job definition and current state. Please note that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of DetectorJobResponse</returns>
        public async System.Threading.Tasks.Task<DetectorJobResponse> GetJobAsync (string jobid)
        {
             ApiResponse<DetectorJobResponse> localVarResponse = await GetJobAsyncWithHttpInfo(jobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Job definition and state Get the Detector job definition and current state. Please note that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>Task of ApiResponse (DetectorJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetectorJobResponse>> GetJobAsyncWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling BarcodeDetectorApi->GetJob");

            var localVarPath = "/barcode/1.0.0/barcode/detector/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectorJobResponse)));
            
        }

        /// <summary>
        /// Submit Detector job for processing Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>DetectorJobResponse</returns>
        public DetectorJobResponse SubmitJob (string jobid, DetectorJob job)
        {
             ApiResponse<DetectorJobResponse> localVarResponse = SubmitJobWithHttpInfo(jobid, job);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Detector job for processing Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>ApiResponse of DetectorJobResponse</returns>
        public ApiResponse< DetectorJobResponse > SubmitJobWithHttpInfo (string jobid, DetectorJob job)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling BarcodeDetectorApi->SubmitJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling BarcodeDetectorApi->SubmitJob");

            var localVarPath = "/barcode/1.0.0/barcode/detector/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (job != null && job.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(job); // http body (model) parameter
            }
            else
            {
                localVarPostBody = job; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectorJobResponse)));
            
        }

        /// <summary>
        /// Submit Detector job for processing Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>Task of DetectorJobResponse</returns>
        public async System.Threading.Tasks.Task<DetectorJobResponse> SubmitJobAsync (string jobid, DetectorJob job)
        {
             ApiResponse<DetectorJobResponse> localVarResponse = await SubmitJobAsyncWithHttpInfo(jobid, job);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit Detector job for processing Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>Task of ApiResponse (DetectorJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetectorJobResponse>> SubmitJobAsyncWithHttpInfo (string jobid, DetectorJob job)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling BarcodeDetectorApi->SubmitJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling BarcodeDetectorApi->SubmitJob");

            var localVarPath = "/barcode/1.0.0/barcode/detector/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (job != null && job.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(job); // http body (model) parameter
            }
            else
            {
                localVarPostBody = job; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectorJobResponse)));
            
        }

        /// <summary>
        /// Upload the file Upload the  image.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image.</param>
        /// <returns>DetectorJobResponse</returns>
        public DetectorJobResponse UploadFile (System.IO.Stream stream)
        {
             ApiResponse<DetectorJobResponse> localVarResponse = UploadFileWithHttpInfo(stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload the file Upload the  image.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image.</param>
        /// <returns>ApiResponse of DetectorJobResponse</returns>
        public ApiResponse< DetectorJobResponse > UploadFileWithHttpInfo (System.IO.Stream stream)
        {
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling BarcodeDetectorApi->UploadFile");

            var localVarPath = "/barcode/1.0.0/barcode/detector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectorJobResponse)));
            
        }

        /// <summary>
        /// Upload the file Upload the  image.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image.</param>
        /// <returns>Task of DetectorJobResponse</returns>
        public async System.Threading.Tasks.Task<DetectorJobResponse> UploadFileAsync (System.IO.Stream stream)
        {
             ApiResponse<DetectorJobResponse> localVarResponse = await UploadFileAsyncWithHttpInfo(stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload the file Upload the  image.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image.</param>
        /// <returns>Task of ApiResponse (DetectorJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetectorJobResponse>> UploadFileAsyncWithHttpInfo (System.IO.Stream stream)
        {
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling BarcodeDetectorApi->UploadFile");

            var localVarPath = "/barcode/1.0.0/barcode/detector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectorJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectorJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectorJobResponse)));
            
        }

    }
}
