/*
 * Barcode
 * <b>The Barcode Reader API '/reader' reads barcodes from image files and returns the barcode data as JSON files.</b>    The flow is generally as follows:  1. First upload an image using the /reader POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Start the job from a PUT request to the /reader/{jobid} endpoint, with the Job and Settings JSON as request body. The barcode detection will now start.  3. Check the job status from the /reader/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the JSON file using the /reader/{jobid}/stream GET endpoint. This will return the JSON file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.barcode.api;

import com.sphereon.sdk.barcode.handler.ApiException;
import com.sphereon.sdk.barcode.model.ErrorResponse;
import java.io.File;
import com.sphereon.sdk.barcode.model.ReaderJob;
import com.sphereon.sdk.barcode.model.ReaderJobResponse;
import com.sphereon.sdk.barcode.model.ReaderResultJobResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BarcodeReaderApi
 */
@Ignore
public class BarcodeReaderApiTest {

    private final BarcodeReaderApi api = new BarcodeReaderApi();

    
    /**
     * Delete a job manually
     *
     * Delete the Job and all related files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String jobid = null;
        ReaderJobResponse response = api.deleteJob(jobid);

        // TODO: test validations
    }
    
    /**
     * Job definition and state
     *
     * Get the ReadResult response , job definition and current state. Please note that you can differentiate completion based on http response status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String jobid = null;
        ReaderResultJobResponse response = api.getJob(jobid);

        // TODO: test validations
    }
    
    /**
     * Submit job for reading
     *
     * Starts the barcode detection of the uploaded files, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the jobId in the path must match the jobId in the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitJobTest() throws ApiException {
        String jobid = null;
        ReaderJob job = null;
        ReaderJobResponse response = api.submitJob(jobid, job);

        // TODO: test validations
    }
    
    /**
     * Upload the file
     *
     * Upload the  image.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        File stream = null;
        ReaderJobResponse response = api.uploadFile(stream);

        // TODO: test validations
    }
    
}
